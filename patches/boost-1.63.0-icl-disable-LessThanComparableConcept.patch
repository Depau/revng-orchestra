diff --git a/boost/icl/closed_interval.hpp b/boost/icl/closed_interval.hpp
index a0278e8..b21c3f9 100644
--- a/boost/icl/closed_interval.hpp
+++ b/boost/icl/closed_interval.hpp
@@ -34,7 +34,7 @@ public:
         : _lwb(unit_element<DomainT>::value()), _upb(identity_element<DomainT>::value()) 
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         BOOST_STATIC_ASSERT((icl::is_discrete<DomainT>::value));
     }
 
@@ -45,7 +45,7 @@ public:
         : _lwb(val), _upb(val)
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         BOOST_STATIC_ASSERT((!icl::is_continuous<DomainT>::value));
     }
 
@@ -54,7 +54,7 @@ public:
         _lwb(low), _upb(up)
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
     }
 
     DomainT lower()const{ return _lwb; }
diff --git a/boost/icl/continuous_interval.hpp b/boost/icl/continuous_interval.hpp
index 3015a1d..4678e66 100644
--- a/boost/icl/continuous_interval.hpp
+++ b/boost/icl/continuous_interval.hpp
@@ -43,7 +43,7 @@ public:
         , _bounds(interval_bounds::right_open())
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         BOOST_STATIC_ASSERT((icl::is_continuous<DomainT>::value)); 
     }
 
@@ -54,7 +54,7 @@ public:
         : _lwb(val), _upb(val), _bounds(interval_bounds::closed())
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         BOOST_STATIC_ASSERT((icl::is_continuous<DomainT>::value));
     }
 
@@ -65,7 +65,7 @@ public:
         : _lwb(low), _upb(up), _bounds(bounds)
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         BOOST_STATIC_ASSERT((icl::is_continuous<DomainT>::value));
     }
 
diff --git a/boost/icl/discrete_interval.hpp b/boost/icl/discrete_interval.hpp
index c7e7bbc..169ecdb 100644
--- a/boost/icl/discrete_interval.hpp
+++ b/boost/icl/discrete_interval.hpp
@@ -43,7 +43,7 @@ public:
         , _bounds(interval_bounds::right_open())
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         BOOST_STATIC_ASSERT((icl::is_discrete<DomainT>::value));
     }
 
@@ -54,7 +54,7 @@ public:
         : _lwb(val), _upb(val), _bounds(interval_bounds::closed())
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         BOOST_STATIC_ASSERT((icl::is_discrete<DomainT>::value));
     }
 
@@ -65,7 +65,7 @@ public:
         : _lwb(low), _upb(up), _bounds(bounds)
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         BOOST_STATIC_ASSERT((icl::is_discrete<DomainT>::value));
     }
 
diff --git a/boost/icl/interval_base_map.hpp b/boost/icl/interval_base_map.hpp
index f61990b..21d4cc2 100644
--- a/boost/icl/interval_base_map.hpp
+++ b/boost/icl/interval_base_map.hpp
@@ -200,7 +200,7 @@ public:
     interval_base_map()
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<CodomainT>));
         BOOST_CONCEPT_ASSERT((EqualComparableConcept<CodomainT>));
     }
@@ -209,7 +209,7 @@ public:
     interval_base_map(const interval_base_map& src): _map(src._map)
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<CodomainT>));
         BOOST_CONCEPT_ASSERT((EqualComparableConcept<CodomainT>));
     }
@@ -223,7 +223,7 @@ public:
     interval_base_map(interval_base_map&& src): _map(boost::move(src._map))
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<CodomainT>));
         BOOST_CONCEPT_ASSERT((EqualComparableConcept<CodomainT>));
     }
diff --git a/boost/icl/interval_base_set.hpp b/boost/icl/interval_base_set.hpp
index 045b23c..0b2a6cb 100644
--- a/boost/icl/interval_base_set.hpp
+++ b/boost/icl/interval_base_set.hpp
@@ -165,7 +165,7 @@ public:
     interval_base_set(const interval_base_set& src): _set(src._set)
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
     }
 
 #   ifndef BOOST_ICL_NO_CXX11_RVALUE_REFERENCES
@@ -177,7 +177,7 @@ public:
     interval_base_set(interval_base_set&& src): _set(boost::move(src._set))
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
     }
 
     /** Move assignment operator */
diff --git a/boost/icl/left_open_interval.hpp b/boost/icl/left_open_interval.hpp
index 817d3dc..16f028e 100644
--- a/boost/icl/left_open_interval.hpp
+++ b/boost/icl/left_open_interval.hpp
@@ -35,7 +35,7 @@ public:
         : _lwb(identity_element<DomainT>::value()), _upb(identity_element<DomainT>::value()) 
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
     }
 
     //NOTE: Compiler generated copy constructor is used
@@ -45,7 +45,7 @@ public:
         : _lwb(predecessor<DomainT,domain_compare>::apply(val)), _upb(val)
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         // Only for discrete types this ctor creates an interval containing 
         // a single element only.
         BOOST_STATIC_ASSERT((icl::is_discrete<DomainT>::value));
@@ -58,7 +58,7 @@ public:
         _lwb(low), _upb(up)
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
     }
 
     DomainT lower()const{ return _lwb; }
diff --git a/boost/icl/map.hpp b/boost/icl/map.hpp
index 6f3c851..cfabba0 100644
--- a/boost/icl/map.hpp
+++ b/boost/icl/map.hpp
@@ -161,7 +161,7 @@ public:
     map()
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<CodomainT>));
         BOOST_CONCEPT_ASSERT((EqualComparableConcept<CodomainT>));
     }
@@ -181,7 +181,7 @@ public:
         : base_type(src)
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<CodomainT>));
         BOOST_CONCEPT_ASSERT((EqualComparableConcept<CodomainT>));
     }
@@ -200,7 +200,7 @@ public:
         : base_type(boost::move(src))
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<CodomainT>));
         BOOST_CONCEPT_ASSERT((EqualComparableConcept<CodomainT>));
     }
diff --git a/boost/icl/open_interval.hpp b/boost/icl/open_interval.hpp
index 95e464c..988a1ef 100644
--- a/boost/icl/open_interval.hpp
+++ b/boost/icl/open_interval.hpp
@@ -36,7 +36,7 @@ public:
         : _lwb(identity_element<DomainT>::value()), _upb(identity_element<DomainT>::value()) 
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
     }
 
     //NOTE: Compiler generated copy constructor is used
@@ -46,7 +46,7 @@ public:
         : _lwb(pred(val)), _upb(succ(val))
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         // Only for discrete types this ctor creates an interval containing 
         // a single element only.
         BOOST_STATIC_ASSERT((icl::is_discrete<DomainT>::value));
@@ -59,7 +59,7 @@ public:
         _lwb(low), _upb(up)
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
     }
 
     DomainT lower()const{ return _lwb; }
diff --git a/boost/icl/right_open_interval.hpp b/boost/icl/right_open_interval.hpp
index 96cde2c..f2725df 100644
--- a/boost/icl/right_open_interval.hpp
+++ b/boost/icl/right_open_interval.hpp
@@ -36,7 +36,7 @@ public:
         : _lwb(identity_element<DomainT>::value()), _upb(identity_element<DomainT>::value()) 
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
     }
 
     //NOTE: Compiler generated copy constructor is used
@@ -46,7 +46,7 @@ public:
         : _lwb(val), _upb(icl::successor<DomainT,domain_compare>::apply(val))
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
         // Only for discrete types this ctor creates an interval containing 
         // a single element only.
         BOOST_STATIC_ASSERT((icl::is_discrete<DomainT>::value));
@@ -57,7 +57,7 @@ public:
         _lwb(low), _upb(up)
     {
         BOOST_CONCEPT_ASSERT((DefaultConstructibleConcept<DomainT>));
-        BOOST_CONCEPT_ASSERT((LessThanComparableConcept<DomainT>));
+
     }
 
     domain_type lower()const{ return _lwb; }
