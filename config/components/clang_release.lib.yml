#@ load("/components/llvm_common.lib.yml", "configure_llvm")
#@ load("/lib/create_component.lib.yml", "single_build_component")

#@ load("/global_options.lib.yml", "options")

---
#@ def cmake_opts():
- -DLLVM_ENABLE_PROJECTS="clang;compiler-rt;libcxxabi;libcxx;clang-tools-extra"
- -DBUILD_SHARED_LIBS=OFF
#@ end

#@yaml/text-templated-strings
---
#@ def _clang_release():
#@    source_url = "https://github.com/llvm/llvm-project/archive/llvmorg-" + options["clang_release_version"] + ".tar.gz"
builds:
  default:
    configure: |
      extract.sh --into "$BUILD_DIR/source" "(@= source_url @)"
      (@= configure_llvm(cmake_build_type="Release", cflags=" ", additional_cmake_options=cmake_opts(), source_dir="$BUILD_DIR/source") @)
    install: |
      cd "$BUILD_DIR"

      rm "${DESTDIR}${ORCHESTRA_ROOT}/lib64/libc++.so" || true
      echo 'INPUT(libc++.so.1 -lc++abi -lpthread)' > "${DESTDIR}${ORCHESTRA_ROOT}/lib64/libc++.so"

      if test -z "$DESTDIR"; then
        echo "Installing clang-release which will clobber LLVM!"
      else
        find ${DESTDIR}${ORCHESTRA_ROOT}/lib* -maxdepth 1 -not -type d \( -name libLLVM* -or -name libclang* \) -delete;
        rm ${DESTDIR}${ORCHESTRA_ROOT}/bin/opt;
        rm ${DESTDIR}${ORCHESTRA_ROOT}/bin/llvm-config;
        rm -rf ${DESTDIR}${ORCHESTRA_ROOT}/lib*/cmake/;
        rm -rf ${DESTDIR}${ORCHESTRA_ROOT}/include/clang/;
        rm -rf ${DESTDIR}${ORCHESTRA_ROOT}/include/clang-c/;
        rm -rf ${DESTDIR}${ORCHESTRA_ROOT}/include/llvm/;
        rm -rf ${DESTDIR}${ORCHESTRA_ROOT}/include/llvm-c/;
      fi

      ninja install
    dependencies:
      - toolchain/host/gcc
      - toolchain/host/binutils
      - cmake
#@ end

---
#@ clang_release_component = _clang_release()
